using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CustomerBenefits
{
    public class Customers
    {
        public Customers() { }

        [JsonProperty("CustomerID")]
        public string CustomerID { get; set; }

        public Benefits Benefit = new Benefits();
    }

    public class Benefits
    {
        public string BenefitName { get; set; }

        public string EffectiveDate { get; set; }

        public string Description { get; set; }

        public string IsActive { get; set; }

        public  string Details { get; set; }
    }
}

/*
 {
    "Customers": {
        "123": [
            {"Benefit":"Green", "EffectiveDate":"Today", "Details":"Green", "Description":"Green", "IsActive":"Y"},
            {"Benefit":"WHD", "EffectiveDate":"Today", "Details":"Green", "Description":"Green", "IsActive":"Y"},
            {"Benefit":"BHF", "EffectiveDate":"Today", "Details":"Green", "Description":"Green", "IsActive":"Y"},
        ],
        "748": [
            {"Benefit":"Green", "EffectiveDate":"Today", "Details":"Green", "Description":"Green", "IsActive":"Y"},
            {"Benefit":"WHD", "EffectiveDate":"Today", "Details":"Green", "Description":"Green", "IsActive":"Y"},
            {"Benefit":"ICE", "EffectiveDate":"Today", "Details":"Green", "Description":"Green", "IsActive":"Y"},
        ]
    }
}









    // <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var empty = Empty.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Empty
    {
        [JsonProperty("Customers")]
        public Dictionary<string, Customer[]> Customers { get; set; }
    }

    public partial class Customer
    {
        [JsonProperty("Benefit")]
        public string Benefit { get; set; }

        [JsonProperty("EffectiveDate")]
        public string EffectiveDate { get; set; }

        [JsonProperty("Details")]
        public string Details { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("IsActive")]
        public string IsActive { get; set; }
    }

    public partial class Empty
    {
        public static Empty FromJson(string json) => JsonConvert.DeserializeObject<Empty>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Empty self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}



     */
